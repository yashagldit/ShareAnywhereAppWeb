#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var debug = require('debug')('angular2-nodejs:server');
var http = require('http');
const path = require('path');
const express = require('express');
const ss = require('socket.io-stream');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

 const users = [];
var server = http.createServer(app);

var io = require('socket.io').listen(server);

io.on('connection',(socket)=>{
    console.log('new connection made.');
    io.emit('message',{room:socket.id,user:socket.id});
    console.log(socket.id);
    socket.on('join', function(data){
     // console.log(data);
      //console.log(socket.id);
      
      
      
      if(io.sockets.adapter.sids[socket.id][data.room]==undefined){
        socket.join(data.room);
        console.log(data.user + ' joined the room : ' + data.room);
        socket.broadcast.to(data.room).emit('new user joined', {user:data.user, message:'has joined this room.'});
        io.in(data.room).emit('joined', {user:data.user, message:data.message});
        users[socket.id]={};
        users[socket.id].user=data.user;
        users[socket.id].room=data.room;
      }
      
      
    });
    socket.on('recon', function(data){
     // console.log(data);
      io.in(data.room).emit('recon', {user:data.user, message:data.message, data:data.data, id:data.id,email:data.email});
      users[socket.id]=data.room;
    });
    socket.on('leave', function(data){
     // console.log(data);
      console.log(data.user + 'left the room : ' + data.room);

      socket.broadcast.to(data.room).emit('left room', {user:data.user, message:'has left this room.'});

      socket.leave(data.room);
    });
    socket.on('file', function (data1,data) {
   //   console.log('file start');
     // console.log(data);
      //console.log(data1);
      var stream = ss.createStream();
      // stream.on('end', function () {
      //     console.log('file sent');
      // });
      // ss(socket).emit('sending', stream); 
      // fs.createReadStream(filename).pipe(stream);
      io.in(data.room).emit('new message', {file:data1,user:data.user, message:data.message, data:data.data, id:data.id,email:data.email});
    });  
    socket.on('disconnect', function(data) {
      // console.log(data);
      console.log(socket.id);
      console.log(users[socket.id])
      console.log(users[socket.id].user + 'disconnect left the room : ' + users[socket.id].room);
      socket.broadcast.to(users[socket.id].room).emit('left room', {user:users[socket.id].user, message:'has disconnect this room.'});
      io.in(users[socket.id].room).emit('user left', {user:users[socket.id].user, message:''});
      users[socket.id]={};
      socket.leave(data.room);
    });
    // ss(socket).on('sending', function(stream) {
    //   stream.pipe(fs.createWriteStream(filename)); 
    //   stream.on('end', function () {
    //     console.log('file received');
    //   });
    // });
    socket.on('message',function(data){
      console.log(data);
      io.in(data.room).emit('new message', {user:data.user, message:data.message, data:data.data, id:data.id,email:data.email});
    })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(process.env.PORT || 3000,()=>{

  console.log('Node app is running on port '+process.env.PORT)
  
  });

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
